<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>セキュリティ on tomato blog</title>
    <link>https://yuhi-sa.github.io/tags/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3/</link>
    <description>Recent content in セキュリティ on tomato blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 28 Mar 2023 09:00:23 +0900</lastBuildDate>
    <atom:link href="https://yuhi-sa.github.io/tags/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>メールにおける認証技術</title>
      <link>https://yuhi-sa.github.io/posts/20230328_mail_auth/1/</link>
      <pubDate>Tue, 28 Mar 2023 09:00:23 +0900</pubDate>
      <guid>https://yuhi-sa.github.io/posts/20230328_mail_auth/1/</guid>
      <description>&#xA;通信路の暗号化 SMTP(Simple Mail Transfer Protocol) over TLS SMTP (Simple Mail Transfer Protocol) over TLSを使用して、SMTP通信を暗号化する。TLSを使用することで、通信経路上の第三者による盗聴や改竄を防ぐことができる。ただし、終端（メールサーバー）で復号化されるため、メールサーバーにアクセスされる場合には注意が必要。&#xA;送信者メールサーバーが送信者を認証 SMTP Auth SMTP Authではユーザー名とパスワードを使い、送信者の認証を行う。チャレンジレスポンス方式により、ユーザー名とパスワードを使って認証を行う。&#xA;受信側のメールサーバーが送信側のメールサーバーを認証 SPF(Sender Policy Framework)：IPアドレス方式 SPFは、送信者のDNSサーバーにSPFレコードを登録することで、受信側のメールサーバーが送信者を認証する。受信側のメールサーバーは、送信者のDNSサーバーに問い合わせてSPFレコードを取得し、IPアドレスを比較することで認証を行う。&#xA;DKIM(DomainKeys Identified Main)：デジタル署名方式 DKIMは、送信者のDNSサーバーに公開鍵を登録することで、受信側のメールサーバーが送信者を認証する仕組み。送信者はメールにデジタル署名を付与して送信し、受信側のメールサーバーは送信者のDNSサーバーに問い合わせて公開鍵を取得し、検証を行う。&#xA;受信者が送信者を認証 S/MIME(Secure / Multipurpose Internet Mail Extensions) S/MIMEは、デジタル署名を用いてメールを暗号化する方法。送信者は、メールにデジタル署名を付与して送信し、受信者は、署名を検証して送信者を認証する。&#xA;PGP(Pretty Good Privacy) PGPは、公開鍵の交換を事前に当事者間で行い、メールにデジタル署名を付与して送信することで、送信者を認証する方法。&#xA;参考 ２０２３　情報処理安全確保支援士「専門知識＋午後問題」の重点対策 </description>
    </item>
    <item>
      <title>シングルサインオン(SSO)</title>
      <link>https://yuhi-sa.github.io/posts/20230105_sec/2/</link>
      <pubDate>Tue, 03 Jan 2023 09:00:23 +0900</pubDate>
      <guid>https://yuhi-sa.github.io/posts/20230105_sec/2/</guid>
      <description>シングルサインオン(SSO) 独立して稼働している複数のシステムに対してログインする場合、それぞれのIDとパスワードを使用する必要がある。一度ログインするだけで、複数のシステムにアクセスできるようにすることをシングルサインオンと呼ぶ。&#xA;実現方法として以下のようなものがある。&#xA;エージェント方式：各サーバにエージェントをインストールしておく方式。 リバースプロキシ方式：リバースプロキシを通して各サーバにアクセスする方式。 代理認証方式：プロキシサーバが端末の代わりにIDとパスワードを各サーバに送信する方式。 ID連携(IDフェデレーション) 上記の認証はCookieを使って実現されるが、Cookieの利用に制限をかけることが難しいため、閉じられたネットワークでの利用が主流であった。しかし、さまざまなクラウドサービスが増加したことからID連携が注目されている。&#xA;ID連携において主要なプロトコルには以下のようなものがある。&#xA;SAML：認証のプロトコル OAuth2.0：認可のプロトコル OIDC：OAuthに認証の機能を追加し拡張したプロトコル 参考 2023 情報処理安全確保支援士「専門知識＋午後問題」の重点対策 </description>
    </item>
    <item>
      <title>チャレンジレスポンス方式</title>
      <link>https://yuhi-sa.github.io/posts/20230105_sec/1/</link>
      <pubDate>Tue, 03 Jan 2023 09:00:23 +0900</pubDate>
      <guid>https://yuhi-sa.github.io/posts/20230105_sec/1/</guid>
      <description>概要 チャレンジレスポンス方式は、セキュリティを強化するために使用される認証方式の一つである。 パスワードを送信することなく、クライアントのIDのみを認証サーバに送信する。&#xA;パスワードが送信されることがないため、第三者による盗聴や攻撃からのリスクが低くなる。&#xA;チャレンジレスポンス方式の流れ [クライアント]利用者がIDとパスワードを入力すると、IDのみを認証サーバに送信 [認証サーバ]乱数を生成し、チャレンジコードとしてクライアントに送信 [クライアント]パスワードとチャンレンジコードを基にハッシュ関数でハッシュ値を生成し、認証サーバに送信 [認証サーバ]チャレンジコードと管理しているパスワードのハッシュ値を計算し、送られてきたハッシュ値と照合 参考 2023 情報処理安全確保支援士「専門知識＋午後問題」の重点対策 </description>
    </item>
  </channel>
</rss>
